;;; gearup-nomelpa.el --- Prelude mode configuration

;;; Commentary:

;; Usage example:
;; (require 'gearup-nomelpa)
;; (setq gearup-autoload-build-versions-file (expand-file-name "savefile/gearup-build-versions.el" prelude-personal-dir))

;;; Code:

(defun gearup--autoload (dir version-file &optional autoload-prefix)
  "Autoload files in directory DIR.

If necessary an autoload file is generated and the files in DIR
are byte-compiled.

AUTOLOAD-PREFIX should be a string specifying a name prefix for
the generated autoloads file. The full autoloads file name is
generated by appending \"-autoloads.el\" to this prefix. If
AUTOLOAD-PREFIX is nil or not a string, the name of the inner
most directory in DIR is used as prefix.

VERSION-FILE must be the name of a file in DIR containing version
information in emacs package standard. The version is used to
avoid recompiling files if there is no newer version (i.e. the
last byte-compiled version is still up to date)."
  (let* ((dir (file-name-as-directory dir))
         (version-file (expand-file-name version-file dir))
         (prefix (if (stringp autoload-prefix)
                     autoload-prefix
                   (file-name-nondirectory (substring dir 0 -1))))
         (filename (concat prefix "-autoloads.el"))
         (generated-autoload-file (expand-file-name filename dir))
         (current-version (gearup--get-package-version version-file))
         last-build-version
         autoload-buffer)
    (gearup--maybe-load-autoload-build-versions-file)
    (setq last-build-version (alist-get version-file gearup-autoload-build-versions nil nil 'string=))
    (unless (string=
             current-version
             last-build-version)
      (byte-recompile-directory dir 0 t)
      (update-directory-autoloads dir)
      (if last-build-version
          (setf (alist-get version-file gearup-autoload-build-versions nil nil 'string=) current-version)
        (setq gearup-autoload-build-versions (cons (list version-file current-version) gearup-autoload-build-versions)))
      (gearup--save-autoload-build-versions))
    (load-library (file-name-base filename))
    (when (setq autoload-buffer (get-buffer filename))
      (kill-buffer autoload-buffer))))

(defun gearup--get-package-version (file)
  "Get version of emacs package file FILE."
  (let (content)
    (setq content (with-temp-buffer
                   (insert-file-contents file)
                   (buffer-string)))
    (secure-hash 'sha256 content)))

(defvar gearup-autoload-build-versions-file (expand-file-name "gearup-build-versions.el" user-emacs-directory)
  "File for saving the build versions of packages loaded by `gearup--autoload'.")

(defun gearup--maybe-load-autoload-build-versions-file ()
  "Read `gearup-autoload-build-versions' from `gearup-autoload-build-versions-file'.
The file is only read if `gearup-autoload-build-versions' is not yet defined."
  (unless (boundp 'gearup-autoload-build-versions)
    (if (file-exists-p gearup-autoload-build-versions-file)
        (with-temp-buffer
          (insert-file-contents-literally gearup-autoload-build-versions-file)
          (condition-case nil
              (while (< (point) (point-max))            
                (eval (read (current-buffer))))
            (error nil)))
        ;;(load-file gearup-autoload-build-versions-file)
      (setq gearup-autoload-build-versions nil))))

(defun gearup--save-autoload-build-versions ()
  "Save version of packages build for loading by
`gearup--autoload'."
  (let ((comment-string ";; This file is automatically generated by gearup--autoload function.\n;; It keeps track of the most recently byte-compiled version of the packages loded with gearup--autoload.\n"))
    (with-temp-file gearup-autoload-build-versions-file
      (insert comment-string "\n")
      (insert "(setq gearup-autoload-build-versions '")
      (prin1 gearup-autoload-build-versions (current-buffer))
      (insert ")"))))

(provide 'gearup-nomelpa)
;;; gearup-nomelpa.el ends here
